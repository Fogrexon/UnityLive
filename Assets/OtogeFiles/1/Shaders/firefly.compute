#pragma kernel KernelPosition

struct FireflyData
{
    float3 position;
};

#define SIMULATION_BLOCK_SIZE 256

StructuredBuffer<FireflyData>   _FireflyDataBufferRead;
RWStructuredBuffer<FireflyData> _FireflyDataBufferWrite;
float _Speed;
int MaxFireflyObjectNum;
float3 _ObjectScale;
float _Time;

groupshared FireflyData fireflies[SIMULATION_BLOCK_SIZE];



float rand(float3 co)
{
	return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 56.787))) * 43758.5453);
}

float noise(float3 pos)
{
	float3 ip = floor(pos);
	float3 fp = smoothstep(0, 1, frac(pos));
	float4 a = float4(
		rand(ip + float3(0, 0, 0)),
		rand(ip + float3(1, 0, 0)),
		rand(ip + float3(0, 1, 0)),
		rand(ip + float3(1, 1, 0)));
	float4 b = float4(
		rand(ip + float3(0, 0, 1)),
		rand(ip + float3(1, 0, 1)),
		rand(ip + float3(0, 1, 1)),
		rand(ip + float3(1, 1, 1)));
 
	a = lerp(a, b, fp.z);
	a.xy = lerp(a.xy, a.zw, fp.y);
	return lerp(a.x, a.y, fp.x);
}

float perlin(float3 pos)
{
	return 
		(noise(pos) +
		noise(pos * 2 ) +
		noise(pos * 4) +
		noise(pos * 8) +
		noise(pos * 16) +
		noise(pos * 32) ) / 6;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void KernelPosition
(
	uint3 DTid : SV_DispatchThreadID
)
{
	const unsigned int P_ID = DTid.x;
											           
	FireflyData b = _FireflyDataBufferWrite[P_ID];
	
    b.position += float3(sin(_Time*0.5)*0.3,sin(_Time*0.2)*0.3,sin(_Time*0.3)*0.3);

	if(b.position.x > 80) b.position.x = -80;
	if(b.position.y > 80) b.position.y = -80;
	if(b.position.z > 80) b.position.z = -80;
	if(b.position.x < -80) b.position.x = 80;
	if(b.position.y < -80) b.position.y = 80;
	if(b.position.z < -80) b.position.z = 80;
											           
	_FireflyDataBufferWrite[P_ID] = b;
}